import traceback
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
import asyncio
import datetime
import psycopg2
from aiogram.fsm.context import FSMContext
from pobedaparser import pobeda
from aeroflot_Parser import osnovnoe
from UrAirparser import uralair
from smartaviaparser import smartavia
from keyboards.keyboards import user_menu, create_city_keyboard
from sql_file import create_table, take_orders
from states.state import User

month_to_number = {'—è–Ω–≤–∞—Ä—å': "01", '—Ñ–µ–≤—Ä–∞–ª—å': "02", '–º–∞—Ä—Ç': "03", '–∞–ø—Ä–µ–ª—å': "04", '–º–∞–π': "05", '–∏—é–Ω—å': "06",
                   '–∏—é–ª—å': "07", '–∞–≤–≥—É—Å—Ç': "08", '—Å–µ–Ω—Ç—è–±—Ä—å': "09", '–æ–∫—Ç—è–±—Ä—å': "10", '–Ω–æ—è–±—Ä—å': "11", '–¥–µ–∫–∞–±—Ä—å': "12"}
nechet = ['—è–Ω–≤–∞—Ä—å', '–º–∞—Ä—Ç', '–º–∞–π', '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç', '–æ–∫—Ç—è–±—Ä—å', '–¥–µ–∫–∞–±—Ä—å']
chet = ['–∞–ø—Ä–µ–ª—å', '–∏—é–Ω—å', '—Å–µ–Ω—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å']
year = datetime.date.today().year
month = datetime.date.today().month
day = datetime.date.today().day

def get_db_cursor():
    conn = psycopg2.connect(
        bname="Aeroports", host="127.0.0.1", user="Alex", password="alex"
    )
    return conn, conn.cursor()


async def run_all_parsers_parallel(resultfrom, resultto, usermonth, userdate, cursor, conn, name, year):
    results = await asyncio.gather(
        osnovnoe(resultfrom, resultto, usermonth, userdate, cursor, conn, name, year),
        pobeda(resultfrom, resultto, usermonth, userdate, cursor, conn, name, year),
        uralair(resultfrom, resultto, usermonth, userdate, cursor, conn, name, year),
        smartavia(resultfrom, resultto, usermonth, userdate, cursor, conn, name, year)
    )
    return results

def get_popular_cities_from(limit=4):
    conn, cursor = get_db_cursor()
    try:
        cursor.execute("SELECT airfrom FROM orders GROUP BY airfrom ORDER BY COUNT(*) DESC LIMIT %s", (limit,))
        result = cursor.fetchall()
        mass = []
        for i in range(len(result)):
            mass.append(result[i][0])
        cities = []
        for el in mass:
            cursor.execute("SELECT city FROM aero WHERE code LIKE %s", (f"%{el}%",))
            cities.append(cursor.fetchone()[0])
        return cities
    finally:
        cursor.close()
        conn.close()

def get_popular_cities_to(limit=4):
    conn, cursor = get_db_cursor()
    try:
        cursor.execute("SELECT airto FROM orders GROUP BY airto ORDER BY COUNT(*) DESC LIMIT %s", (limit,))
        result = cursor.fetchall()
        mass = []
        for i in range(len(result)):
            mass.append(result[i][0])
        cities = []
        for el in mass:
            cursor.execute("SELECT city FROM aero WHERE code LIKE %s", (f"%{el}%",))
            cities.append(cursor.fetchone()[0])
        return cities
    finally:
        cursor.close()
        conn.close()


async def add_user(user_id, username):
    conn, cursor = get_db_cursor()
    try:
        cursor.execute(f"select * from telegramusers where user_id = {user_id};")
        chek_user = cursor.fetchone()
        if chek_user is None:
            cursor.execute(f"INSERT INTO telegramusers (user_id, username) VALUES ({user_id}, '{username}')")
            conn.commit()
    finally:
        cursor.close()
        conn.close()


async def start_command(message: types.Message):
    await add_user(message.from_user.id, message.from_user.username)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [types.KeyboardButton(text='/start'), types.KeyboardButton(text='/air'), types.KeyboardButton(text='/repeat')]
    ])
    await message.answer(f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {message.from_user.full_name} üòâ\n'
                         f'–†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ /air, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–∫–∞—Ç—å –±–∏–ª–µ—Ç—ã '
                         f'–∏–ª–∏ /repeat —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å', reply_markup=kb)

async def air_from_handler(message: types.Message, state: FSMContext):
    conn, cursor = get_db_cursor()
    try:
        popular_citys = get_popular_cities_from(cursor)
        keyboard = create_city_keyboard(popular_citys, direction="from")
        await message.answer("üõ´ –û—Ç–∫—É–¥–∞ –ø–æ–ª–µ—Ç–∏–º?", reply_markup=keyboard)
        await state.set_state(User.air_from.state)
    finally:
        cursor.close()
        conn.close()


async def air_to_handler(message: types.Message, state: FSMContext):
    conn, cursor = get_db_cursor()
    try:
        cursor.execute(f"SELECT code FROM aero WHERE LOWER(city) LIKE %s;", (message.text.lower(),))
        resultfrom = cursor.fetchall()
        if resultfrom:
            resultfrom = resultfrom[0][0]
            newres = resultfrom.split(",")
            resultfrom = newres[0]
        else:
            await message.answer("–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            return
        await state.update_data(air_from=resultfrom)
        await state.update_data(city_from=message.text)
        popular_citys = get_popular_cities_to(cursor)
        keyboard = create_city_keyboard(popular_citys, direction="to")
        await message.answer("üõ¨ –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–µ—Ç–µ—Ç—å", reply_markup=keyboard)
        await state.set_state(User.air_to.state)
    finally:
        cursor.close()
        conn.close()


async def month_handler(message: types.Message, state: FSMContext):
    conn, cursor = get_db_cursor()
    try:
        user_data = await state.get_data()
        cursor.execute(f"SELECT code FROM aero WHERE lower(city) LIKE %s;", (message.text.lower(),))
        resultto = cursor.fetchall()
        if resultto:
            resultto = resultto[0][0]
            newres = resultto.split(",")
            resultto = newres[0]
            if resultto == user_data['air_from']:
                await message.answer(
                    "–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–µ—Ç–∞—Ç—å –ø–æ –≥–æ—Ä–æ–¥—É? –ú–æ–≥—É –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å 11 —Å–µ–Ω—Ç—è–±—Ä—è –∏ —Å–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
                return
        else:
            await message.answer("–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
            return
        await state.update_data(air_to=resultto)
        await state.update_data(city_to=message.text)
        await message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –ø–µ—Ä–µ–ª–µ—Ç–∞")
        await state.set_state(User.month.state)
    finally:
        cursor.close()
        conn.close()

async def day_handler(message: types.Message, state: FSMContext):
    global year
    if message.text.lower() in month_to_number.keys():
        pass
    else:
        await message.answer("–¢–∞–∫–æ–≥–æ –º–µ—Å—è—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        return
    await state.update_data(month=message.text.lower())
    await message.answer("üìÖ –ù–∞ –∫–∞–∫–æ–µ —á–∏—Å–ª–æ —Å–º–æ—Ç—Ä–µ—Ç—å –±–∏–ª–µ—Ç—ã? ")
    await state.set_state(User.day.state)


async def vivod_handler(message: types.Message, state: FSMContext):
    conn, cursor = get_db_cursor()
    try:
        user_data = await state.get_data()
        global year
        newyear = year
        try:
            userdate = int(message.text)
        except Exception:
            await message.answer("–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ üòî")
            return
        if int(month_to_number[user_data['month']]) == month and userdate < day or int(
                month_to_number[user_data['month']]) < month:
            newyear = int(newyear) + 1
            await message.answer("–¢–∞–∫–æ–π –¥–∞—Ç—ã –≤ —ç—Ç–æ–º –≥–æ–¥—É —É–∂–µ –Ω–µ—Ç, –ø–æ—ç—Ç–æ–º—É –±—ã–ª –≤—ã–±—Ä–∞–Ω —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥")
        elif user_data['month'] in chet and int(userdate) in range(1, 31):
            pass
        elif user_data['month'] in nechet and int(userdate) in range(1, 32):
            pass
        elif user_data['month'] == '–§–µ–≤—Ä–∞–ª—å' and int(year) % 4 == 0 and int(userdate) in range(1, 30):
            pass
        elif user_data['month'] == '–§–µ–≤—Ä–∞–ª—å' and int(year) % 4 != 0 and int(userdate) in range(1, 29):
            pass
        else:
            await message.answer("–¢–∞–∫–æ–π –¥–∞—Ç—ã –Ω–µ—Ç –≤ –≤—ã–±—Ä–∞–Ω–æ–º –º–µ—Å—è—Ü–µ üòî")
            return
        await state.update_data(day=message.text)
        await state.update_data(year=newyear)
        user_data = await state.get_data()
        await message.answer(
            f"–û—Ç–ª–∏—á–Ω–æ, —Å–µ–π—á–∞—Å –ø–æ—Å–º–æ—Ç—Ä–∏–º –∫–∞–∫–∏–µ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –±–∏–ª–µ—Ç–∞–º –∏–∑ {user_data['city_from']} –≤ "
            f"{user_data['city_to']} {userdate} {user_data['month']} {newyear}–≥. üïí")
        create_table(str(message.from_user.id), cursor, conn)
        userid = message.from_user.id
        name = '"' + str(userid) + "flyghts" + '"'
        resultt = await run_all_parsers_parallel(user_data['air_from'], user_data['air_to'],
                                                 user_data['month'], userdate, cursor, conn, name, newyear)
        cursor.execute('SELECT * FROM ' + name + ' ORDER BY price asc')
        result = cursor.fetchall()
        if result:
            await state.update_data(all_flights=result, page=0)
            await show_page(message, result, 0, user_data)
        else:
            await message.answer(
                "–†–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –¥–∞—Ç—ã. üòî\n"
                "–¢–∞–∫–∂–µ –º–æ–≥–ª–∞ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –æ—à–∏–±–∫–∞ ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
        try:
            take_orders(name, userid, user_data['air_from'], user_data['air_to'], user_data['month'], user_data['day'],
                        cursor, conn)
        except Exception:
            traceback.print_exc()
            print("take orders")
    finally:
        cursor.close()
        conn.close()


async def show_page(message: types.Message, flights, page, user_data):
    conn, cursor = get_db_cursor()
    try:
        total_flights = len(flights)

        if page < 0:
            page = 0
        elif page >= total_flights:
            page = total_flights - 1

        el = flights[page]

        text = ""
        time_from, airfrom, timeto, plusday, airto, compname, price, leftsit = el[1:9]
        plusday = plusday.replace('+', '\+')

        cursor.execute("SELECT city FROM aero WHERE code LIKE %s", (f"%{airfrom}%",))
        city_from = cursor.fetchone()[0]
        city_from = city_from.replace('-', '\-')

        cursor.execute("SELECT city FROM aero WHERE code LIKE %s", (f"%{airto}%",))
        city_to = cursor.fetchone()[0]
        city_to = city_to.replace('-', '\-')
        text += (f"C—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_flights}\n"
                 f"‚úà \**{compname}*\*\n"
                 f"_{city_from}_ \({airfrom}\) \- _{city_to}_ \({airto}\) \nüìÖ __–í—ã–ª–µ—Ç__: {user_data['day']} "
                 f"{user_data['month']} {plusday}  \|  ‚è∞  {time_from} \- {timeto}\n"
                 f"üí∞  –¶–µ–Ω–∞: _\*{price}‚ÇΩ\*_\nüí∫ {leftsit}\n\n")

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev"),
                InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data="next")
            ]
        ])
        await message.answer(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2)
    finally:
        cursor.close()
        conn.close()


async def repeat_order(message: types.Message, state: FSMContext):
    conn, cursor = get_db_cursor()
    try:
        newyear = year
        cursor.execute(f"SELECT airfrom from orders WHERE id_user = {message.from_user.id} ORDER BY id desc")
        airfrom_table = cursor.fetchone()[0]
        cursor.execute(f"SELECT airto from orders WHERE id_user = {message.from_user.id} ORDER BY id desc")
        airto_table = cursor.fetchone()[0]
        cursor.execute(f"SELECT month from orders WHERE id_user = {message.from_user.id} ORDER BY id desc")
        month_table = cursor.fetchone()[0]
        cursor.execute(f"SELECT userdate from orders WHERE id_user = {message.from_user.id} ORDER BY id desc")
        day_table = cursor.fetchone()[0]
        if int(month_to_number[month_table]) == month and day_table < day or int(month_to_number[month_table]) < month:
            newyear = int(newyear) + 1

        if airfrom_table:
            await message.answer(
                f"–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –≤–Ω–æ–≤—å –ø–æ—Å–º–æ—Ç—Ä–∏–º –∫–∞–∫–∏–µ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –±–∏–ª–µ—Ç–∞–º –∏–∑ {airfrom_table} –≤ "
                f"{airto_table} {day_table} {month_table} {newyear} üïí")
            create_table(str(message.from_user.id), cursor, conn)
            userid = message.from_user.id
            name = '"' + str(userid) + "flyghts" + '"'
            resultt = await run_all_parsers_parallel(airfrom_table, airto_table,
                                                     month_table, day_table, cursor, conn, name, newyear)
            cursor.execute('SELECT * FROM ' + name + ' ORDER BY price asc')
            result = cursor.fetchall()
            if result:
                await state.update_data(air_from=airfrom_table)
                await state.update_data(air_to=airto_table)
                await state.update_data(month=month_table)
                await state.update_data(day=day_table)
                user_data = await state.get_data()
                await state.update_data(all_flights=result, page=0)
                await show_page(message, result, 0, user_data)
            else:
                await message.answer(
                    "–†–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –¥–∞—Ç—ã. üòî\n"
                    "–¢–∞–∫–∂–µ –º–æ–≥–ª–∞ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –æ—à–∏–±–∫–∞ ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
            try:
                take_orders(name, userid, airfrom_table, airto_table, month_table, day_table, cursor, conn)
            except Exception:
                traceback.print_exc()
                print("take orders")
        else:
            await message.answer("–ü–æ—Ö–æ–∂–µ —á—Ç–æ —Ç—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª –∑–∞–ø—Ä–æ—Å—ã –∏–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –¥–∞–ª–∞ —Å–±–æ–π –∏ "
                                 "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ–∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö –∏—Å—á–µ–∑–ª–∞ üòî \n"
                                 "–ü–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /air")
    finally:
        cursor.close()
        conn.close()


def register_message(dp: Dispatcher):
    dp.message.register(start_command, CommandStart())
    dp.message.register(air_from_handler, Command("air"))
    dp.message.register(repeat_order, Command("repeat"))
    dp.message.register(air_to_handler, User.air_from)
    dp.message.register(month_handler, User.air_to)
    dp.message.register(day_handler, User.month)
    dp.message.register(vivod_handler, User.day)
    #dp.message.register(state_handler, User.number)
