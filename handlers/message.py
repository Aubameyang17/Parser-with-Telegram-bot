import io
import traceback
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from aiogram import Dispatcher, types, Bot
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
import asyncio
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import datetime
import psycopg2
from aiogram.fsm.context import FSMContext
from pobedaparser import pobeda
from aeroflot_Parser import osnovnoe
from UrAirparser import uralair
from smartaviaparser import smartavia
from keyboards.keyboards import create_city_keyboard, create_month_keyboard
from sql_file import create_table, take_orders
from states.state import User

month_to_number = {'—è–Ω–≤–∞—Ä—å': "01", '—Ñ–µ–≤—Ä–∞–ª—å': "02", '–º–∞—Ä—Ç': "03", '–∞–ø—Ä–µ–ª—å': "04", '–º–∞–π': "05", '–∏—é–Ω—å': "06",
                   '–∏—é–ª—å': "07", '–∞–≤–≥—É—Å—Ç': "08", '—Å–µ–Ω—Ç—è–±—Ä—å': "09", '–æ–∫—Ç—è–±—Ä—å': "10", '–Ω–æ—è–±—Ä—å': "11", '–¥–µ–∫–∞–±—Ä—å': "12"}
nechet = ['—è–Ω–≤–∞—Ä—å', '–º–∞—Ä—Ç', '–º–∞–π', '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç', '–æ–∫—Ç—è–±—Ä—å', '–¥–µ–∫–∞–±—Ä—å']
chet = ['–∞–ø—Ä–µ–ª—å', '–∏—é–Ω—å', '—Å–µ–Ω—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å']
year = datetime.date.today().year
month = datetime.date.today().month
day = datetime.date.today().day
conn = psycopg2.connect(dbname="Aeroports", host="127.0.0.1", user="Alex", password="alex")
cursor = conn.cursor()


async def run_all_parsers_parallel(resultfrom, resultto, usermonth, userdate, conn, cursor, name, year):
    results = await asyncio.gather(
        osnovnoe(resultfrom, resultto, usermonth, userdate, conn, cursor, name, year),
        pobeda(resultfrom, resultto, usermonth, userdate, conn, cursor, name, year),
        uralair(resultfrom, resultto, usermonth, userdate, conn, cursor, name, year),
        smartavia(resultfrom, resultto, usermonth, userdate, conn, cursor, name, year)
    )
    return results

async def get_popular_cities_from():
    cursor.execute("SELECT airfrom FROM orders GROUP BY airfrom ORDER BY COUNT(*) DESC LIMIT 4")
    result = cursor.fetchall()
    mass = []
    for i in range(len(result)):
        mass.append(result[i][0])
    cities = []
    for el in mass:
        cursor.execute("SELECT city FROM aero WHERE code LIKE %s", (f"%{el}%",))
        city = cursor.fetchone()[0]
        cities.append(city)
    return cities

async def get_popular_cities_to():
    cursor.execute("SELECT airto FROM orders GROUP BY airto ORDER BY COUNT(*) DESC LIMIT 4")
    result = cursor.fetchall()
    mass = []
    for i in range(len(result)):
        mass.append(result[i][0])
    cities = []
    for el in mass:
        cursor.execute("SELECT city FROM aero WHERE code LIKE %s", (f"%{el}%",))
        city = cursor.fetchone()[0]
        cities.append(city)
    return cities


async def show_fake_loading(message, status=True):
    loading_phrases = [
        "üîé –ò—â–µ–º –±–∏–ª–µ—Ç—ã.",
        "üîé –ò—â–µ–º –±–∏–ª–µ—Ç—ã..",
        "üîé –ò—â–µ–º –±–∏–ª–µ—Ç—ã...",
        "üîé –ò—â–µ–º –±–∏–ª–µ—Ç—ã"
    ]
    loading_msg = await message.answer("üîé –ò—â–µ–º –±–∏–ª–µ—Ç—ã")
    try:
        while status:
            for text in loading_phrases:
                await asyncio.sleep(1.5)
                await loading_msg.edit_text(text)
    except asyncio.CancelledError:
        # –ü—Ä–∏ –æ—Ç–º–µ–Ω–µ (–∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏–º –∑–∞–≥—Ä—É–∑–∫—É) –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await loading_msg.delete()



async def add_user(user_id: int, username: str):
    cursor.execute("SELECT * FROM telegramusers WHERE user_id = %s", (user_id,))
    chek_user = cursor.fetchone()
    if chek_user is None:
        cursor.execute(
            "INSERT INTO telegramusers (user_id, username) VALUES (%s, %s)",
            (user_id, username)
        )
        conn.commit()


def run_async_in_thread(coro):
    return asyncio.run(coro)



async def start_command(message: types.Message):
    await add_user(message.from_user.id, message.from_user.username)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[
        [types.KeyboardButton(text='/start'), types.KeyboardButton(text='/air'), types.KeyboardButton(text='/repeat')]
    ])
    await message.answer(f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {message.from_user.full_name} üòâ\n'
                         f'–†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å, –Ω–∞–ø–∏—à–∏—Ç–µ /air, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–∫–∞—Ç—å –±–∏–ª–µ—Ç—ã '
                         f'–∏–ª–∏ /repeat —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å, –≤—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É '
                         f'/help –∫–æ—Ç–æ—Ä–∞—è —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –æ –¥—Ä—É–≥–∏—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö', reply_markup=kb)

async def help_command(message: types.Message):
    await message.answer(f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {message.from_user.full_name} üòå\n'
                         f'–°–µ–π—á–∞—Å —è —Ä–∞—Å—Å–∫–∞–∂—É –∫–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞:\n'
                         f'/start - –Ω–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –ø–æ–ø—Ä–∏–≤–µ—Ç—Å–≤—É–µ—Ç\n'
                         f'/air - —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –±–∏–ª–µ—Ç–æ–≤\n'
                         f'/repeat - —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –≤—ã —Å–º–æ–∂–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å\n'
                         f'/stats - —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –≤–∞—Å –ø–æ–∑–Ω–≤–∫–æ–º–∏—Ç —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n'
                         f'/stats_per_company - —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º —É–≤–∏–¥–µ—Ç—å '
                         f'—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω –ø–æ –∫–æ–º–ø–∞–Ω–∏—è–º –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ\n'
                         f'/stats_per_day - —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∂–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏—è '
                         f'—Ü–µ–Ω –ø–æ –¥–Ω—è–º –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ')

async def air_from_handler(message: types.Message, state: FSMContext):
    popular_citys = await get_popular_cities_from()
    keyboard = create_city_keyboard(popular_citys, direction="from")
    await message.answer("üõ´ –û—Ç–∫—É–¥–∞ –ø–æ–ª–µ—Ç–∏–º?", reply_markup=keyboard)
    await state.set_state(User.air_from.state)


async def air_to_handler(message: types.Message, state: FSMContext):
    cursor.execute("SELECT code FROM aero WHERE LOWER(city) LIKE %s;", (message.text.lower(),))
    resultfrom = cursor.fetchall()
    if resultfrom:
        resultfrom = resultfrom[0][0]
        newres = resultfrom.split(",")
        resultfrom = newres[0]
    else:
        await message.answer("–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        return
    await state.update_data(air_from=resultfrom)
    await state.update_data(city_from=message.text)
    popular_citys = await get_popular_cities_to()
    keyboard = create_city_keyboard(popular_citys, direction="to")
    await message.answer("üõ¨ –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–µ—Ç–µ—Ç—å", reply_markup=keyboard)
    await state.set_state(User.air_to.state)



async def month_handler(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    cursor.execute("SELECT code FROM aero WHERE lower(city) LIKE %s;", (message.text.lower(),))
    resultto = cursor.fetchall()
    if resultto:
        resultto = resultto[0][0]
        newres = resultto.split(",")
        resultto = newres[0]
        if resultto == user_data['air_from']:
            await message.answer(
                "–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–µ—Ç–∞—Ç—å –ø–æ –≥–æ—Ä–æ–¥—É? –ú–æ–≥—É –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å 11 —Å–µ–Ω—Ç—è–±—Ä—è –∏ —Å–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
            return
    else:
        await message.answer("–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        return
    await state.update_data(air_to=resultto)
    await state.update_data(city_to=message.text)
    await message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –ø–µ—Ä–µ–ª–µ—Ç–∞")
    await state.set_state(User.month.state)

async def day_handler(message: types.Message, state: FSMContext):
    global year
    if message.text.lower() in month_to_number.keys():
        pass
    else:
        await message.answer("–¢–∞–∫–æ–≥–æ –º–µ—Å—è—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        return
    await state.update_data(month=message.text.lower())
    await message.answer("üìÖ –ù–∞ –∫–∞–∫–æ–µ —á–∏—Å–ª–æ —Å–º–æ—Ç—Ä–µ—Ç—å –±–∏–ª–µ—Ç—ã? ")
    await state.set_state(User.day.state)


async def vivod_handler(message: types.Message, state: FSMContext, bot: Bot):
    user_data = await state.get_data()
    global year
    newyear = year
    try:
        userdate = int(message.text)
    except Exception:
        await message.answer("–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ üòî")
        return
    if int(month_to_number[user_data['month']]) == month and userdate < day or int(
            month_to_number[user_data['month']]) < month:
        newyear = int(newyear) + 1
        await message.answer("–¢–∞–∫–æ–π –¥–∞—Ç—ã –≤ —ç—Ç–æ–º –≥–æ–¥—É —É–∂–µ –Ω–µ—Ç, –ø–æ—ç—Ç–æ–º—É –±—ã–ª –≤—ã–±—Ä–∞–Ω —Å–ª–µ–¥—É—é—â–∏–π –≥–æ–¥")
    elif user_data['month'] in chet and int(userdate) in range(1, 31):
        pass
    elif user_data['month'] in nechet and int(userdate) in range(1, 32):
        pass
    elif user_data['month'] == '–§–µ–≤—Ä–∞–ª—å' and int(year) % 4 == 0 and int(userdate) in range(1, 30):
        pass
    elif user_data['month'] == '–§–µ–≤—Ä–∞–ª—å' and int(year) % 4 != 0 and int(userdate) in range(1, 29):
        pass
    else:
        await message.answer("–¢–∞–∫–æ–π –¥–∞—Ç—ã –Ω–µ—Ç –≤ –≤—ã–±—Ä–∞–Ω–æ–º –º–µ—Å—è—Ü–µ üòî")
        return
    await state.update_data(day=message.text)
    await state.update_data(year=newyear)
    user_data = await state.get_data()
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ, —Å–µ–π—á–∞—Å –ø–æ—Å–º–æ—Ç—Ä–∏–º –∫–∞–∫–∏–µ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –±–∏–ª–µ—Ç–∞–º –∏–∑ {user_data['city_from']} –≤ "
        f"{user_data['city_to']} {userdate} {user_data['month']} {newyear}–≥. üïí")
    create_table(str(message.from_user.id), cursor, conn)
    userid = message.from_user.id
    name = '"' + str(userid) + "flyghts" + '"'
    loading_task = asyncio.create_task(show_fake_loading(message))

    try:
        resultt = await asyncio.to_thread(
            run_async_in_thread,
            run_all_parsers_parallel(
                user_data['air_from'],
                user_data['air_to'],
                user_data['month'],
                userdate,
                cursor,
                conn,
                name,
                newyear
            )
        )
    finally:
        loading_task.cancel()
    cursor.execute('SELECT * FROM ' + name + ' ORDER BY price asc')
    result = cursor.fetchall()
    if result:
        await state.update_data(all_flights=result, page=0)
        await show_page(message, result, 0, user_data)
    else:
        await message.answer(
            "–†–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –¥–∞—Ç—ã. üòî\n"
            "–¢–∞–∫–∂–µ –º–æ–≥–ª–∞ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –æ—à–∏–±–∫–∞ ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
    try:
        take_orders(name, userid, user_data['air_from'], user_data['air_to'], user_data['month'], user_data['day'],
                            cursor, conn)
    except Exception:
        traceback.print_exc()
        print("take orders")


async def show_page(message: types.Message, flights, page, user_data):
    total_flights = len(flights)

    if page < 0:
        page = 0
    elif page >= total_flights:
        page = total_flights - 1

    el = flights[page]

    text = ""
    time_from, airfrom, timeto, plusday, airto, compname, price, leftsit = el[1:9]
    plusday = plusday.replace('+', '\+')
    cursor.execute("SELECT city FROM aero WHERE code LIKE %s", (f"%{airfrom}%",))
    city_from = cursor.fetchone()[0]
    city_from = city_from.replace('-', '\-')
    cursor.execute("SELECT city FROM aero WHERE code LIKE %s", (f"%{airto}%",))
    city_to = cursor.fetchone()[0]
    city_to = city_to.replace('-', '\-')
    text += (f"C—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_flights}\n"
                f"‚úà \**{compname}*\*\n"
                f"_{city_from}_ \({airfrom}\) \- _{city_to}_ \({airto}\) \nüìÖ __–í—ã–ª–µ—Ç__: {user_data['day']} "
                f"{user_data['month']} {plusday}  \|  ‚è∞  {time_from} \- {timeto}\n"
                f"üí∞  –¶–µ–Ω–∞: _\*{price}‚ÇΩ\*_\nüí∫ {leftsit}\n\n")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="prev"),
            InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data="next")
        ]
    ])
    await message.answer(text, reply_markup=keyboard, parse_mode=ParseMode.MARKDOWN_V2)


async def repeat_order(message: types.Message, state: FSMContext):
    newyear = year
    cursor.execute(f"SELECT airfrom from orders WHERE id_user = {message.from_user.id} ORDER BY id desc")
    airfrom_table = cursor.fetchone()[0]
    cursor.execute(f"SELECT airto from orders WHERE id_user = {message.from_user.id} ORDER BY id desc")
    airto_table = cursor.fetchone()[0]
    cursor.execute(f"SELECT month from orders WHERE id_user = {message.from_user.id} ORDER BY id desc")
    month_table = cursor.fetchone()[0]
    cursor.execute(f"SELECT userdate from orders WHERE id_user = {message.from_user.id} ORDER BY id desc")
    day_table = cursor.fetchone()[0]
    if int(month_to_number[month_table]) == month and int(day_table) < day or int(month_to_number[month_table]) < month:
        newyear = int(newyear) + 1

    if airfrom_table:
        await message.answer(
            f"–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –≤–Ω–æ–≤—å –ø–æ—Å–º–æ—Ç—Ä–∏–º –∫–∞–∫–∏–µ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –±–∏–ª–µ—Ç–∞–º –∏–∑ {airfrom_table} –≤ "
            f"{airto_table} {day_table} {month_table} {newyear} üïí")
        create_table(str(message.from_user.id), cursor, conn)
        userid = message.from_user.id
        name = '"' + str(userid) + "flyghts" + '"'
        resultt = await run_all_parsers_parallel(airfrom_table, airto_table,
                                                     month_table, day_table, cursor, conn, name, newyear)
        cursor.execute('SELECT * FROM ' + name + ' ORDER BY price asc')
        result = cursor.fetchall()
        if result:
            await state.update_data(air_from=airfrom_table)
            await state.update_data(air_to=airto_table)
            await state.update_data(month=month_table)
            await state.update_data(day=day_table)
            user_data = await state.get_data()
            await state.update_data(all_flights=result, page=0)
            await show_page(message, result, 0, user_data)
        else:
            await message.answer(
                "–†–µ–π—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –¥–∞—Ç—ã. üòî\n"
                "–¢–∞–∫–∂–µ –º–æ–≥–ª–∞ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –æ—à–∏–±–∫–∞ ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
        try:
            take_orders(name, userid, airfrom_table, airto_table, month_table, day_table, cursor, conn)
        except Exception:
            traceback.print_exc()
            print("take orders")
    else:
        await message.answer("–ü–æ—Ö–æ–∂–µ —á—Ç–æ —Ç—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–ª –∑–∞–ø—Ä–æ—Å—ã –∏–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –¥–∞–ª–∞ —Å–±–æ–π –∏ "
                                 "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ–∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö –∏—Å—á–µ–∑–ª–∞ üòî \n"
                                 "–ü–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /air")

async def statistics(message: types.Message):
    await message.answer("üìà –ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–µ—Ä–µ—à–µ–ª –≤ –æ—Ç–¥–µ–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏! ü•∏ "
                         "–ó–Ω–∞—á–∏—Ç —Ç—ã –≥–æ—Ç–æ–≤ —É–≤–∏–¥–µ—Ç—å –≤—Å—è–∫–∏–µ –≥—Ä–∞—Ñ–∏—á–∫–∏ –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏, —á—Ç–æ–∂, —ç—Ç–æ –ø–æ—Ö–≤–∞–ª—å–Ω–æ, "
                         "–Ω–æ –º–Ω–µ –Ω—É–∂–Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç —Ç–µ–±—èüóø\n"
                         "–≤—ã–±–µ—Ä–∏ —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç—ã —Ö–æ—á–µ—à—å —É–≤–∏–¥–µ—Ç—å –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
                         "–Ø –º–æ–≥—É –≤—ã–≤–µ—Å—Ç–∏ —Ç–µ–±–µ –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω —Ç–µ–±–µ –ª–∏—à—å –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å /stats_per_day "
                         "–∏ —É–∫–∞–∑–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –¥–∞—Ç—É\n"
                         "–Ø —Ç–∞–∫–∂–µ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω –æ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π —á—Ç–æ–±—ã —Ç—ã —É–≤–∏–¥–µ–ª –∫–∞–∫–∞—è –¥–µ—à–µ–≤–ª–µ"
                         "–Ω–∞–¥–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å /stats_per_company\n")

async def stats_per_day(message: types.Message, state: FSMContext):
    popular_citys = await get_popular_cities_from()
    keyboard = create_city_keyboard(popular_citys, direction="dayfrom")
    await message.answer("–î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–Ω–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç —á—Ç–æ–±—ã —Ç—ã —É–∫–∞–∑–∞–ª –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞ "
                         "(–≤ –∏–º–µ–Ω–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ –µ—Å–ª–∏ —á—Ç–æ, —Ç–æ–ª—å–∫–æ —Ç—Å—Å—Å...)", reply_markup=keyboard)
    await state.set_state(User.per_day_air_from.state)


async def stat_air_to_handler(message: types.Message, state: FSMContext):
    cursor.execute("SELECT code FROM aero WHERE LOWER(city) LIKE %s;", (message.text.lower(),))
    resultfrom = cursor.fetchall()
    if resultfrom:
        resultfrom = resultfrom[0][0]
        newres = resultfrom.split(",")
        resultfrom = newres[0]
    else:
        await message.answer("–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üòî")
        return
    await state.update_data(per_day_air_from=resultfrom)
    await state.update_data(per_day_city_from=message.text)
    popular_citys = await get_popular_cities_to()
    keyboard = create_city_keyboard(popular_citys, direction="dayto")
    await message.answer("üóí –°—É–ø–µ—Ä! —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–∏–ª–µ—Ç–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ", reply_markup=keyboard)
    await state.set_state(User.per_day_air_to.state)


async def data_stats(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    cursor.execute("SELECT code FROM aero WHERE lower(city) LIKE %s;", (message.text.lower(),))
    resultto = cursor.fetchall()
    if resultto:
        resultto = resultto[0][0]
        newres = resultto.split(",")
        resultto = newres[0]
        if resultto == user_data['per_day_air_from']:
            await message.answer(
                "–Ø –Ω–µ –º–æ–≥—É –≤—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –≤—ã –≤–≤–µ–ª–∏ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –≥–æ—Ä–æ–¥ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≥–æ—Ä–æ–¥–∞ –≤—ã–ª–µ—Ç–∞ –∏ –ø—Ä–∏–ª–µ—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π")
            return
    else:
        await message.answer("–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        return
    await state.update_data(per_day_air_to=resultto)
    await state.update_data(per_day_city_to=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ, —Å–µ–π—á–∞—Å —è –ø–æ–∫–∞–∂—É –∫–∞–∫ –º–µ–Ω—è–ª–∞—Å—å —Ü–µ–Ω–∞ –ø–æ –∑–∞–¥–∞–Ω–æ–º—É —Ç–æ–±–æ–π –º–∞—Ä—à—Ä—É—Ç—É üòá\n"
                         "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–Ω–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–Ω—è –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ –≤—ã–ª–µ—Ç–∞ üìÖ, "
                         "–º–æ–∂–µ—à—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –µ–µ —É–∫–∞–∑–∞—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ -> 2025-01-01 (–≥–æ–¥-–º–µ—Å—è—Ü-–¥–µ–Ω—å) ü•π\n"
                         "–ï—Å–ª–∏ —Ç—ã –≤–≤–µ–¥–µ—à—å –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É —è –Ω–µ –±—É–¥—É —Ç–µ–±—è –ø–æ–ø—Ä–æ–≤–ª—è—Ç—å, "
                         "–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—É —á—Ç–æ –ø–æ —Ç–∞–∫–æ–π –¥–∞—Ç–µ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ üòí")
    await state.set_state(User.per_day_date.state)


async def stats_per_day_magic(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    city_from = user_data['per_day_air_from']
    city_to = user_data['per_day_air_to']
    umounth = month
    departure_date = message.text
    await state.update_data(stat_date=departure_date)
    await plot_day_comparison(message, city_from, city_to, umounth, state)

async def plot_day_comparison(message_or_callback, city_from, city_to, umonth, state: FSMContext, edit=False):
    user_data = await state.get_data()
    conn = psycopg2.connect(dbname="Aeroports", host="127.0.0.1", user="Alex", password="alex")
    cursor = conn.cursor()
    query = """
    SELECT 
    order_date::date AS day,
    company,
    MIN(price) AS min_price
    FROM all_flyghts
    WHERE city_from = %s AND city_to = %s and fly_date = %s AND EXTRACT(MONTH FROM order_date) = %s
    GROUP BY day, company
    ORDER BY day;


    """
    df = pd.read_sql_query(query, conn, params=(city_from, city_to, user_data['stat_date'], umonth))

    # –ü–æ—Å—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
    plt.figure(figsize=(12, 6))

    for company in df['company'].unique():
        company_data = df[df['company'] == company]
        plt.plot(company_data['day'], company_data['min_price'], label=company, marker='o')

    plt.title("–î–∏–Ω–∞–º–∏–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –ø–æ –¥–Ω—è–º")
    plt.xlabel("–î–∞—Ç–∞ –≤—ã–ª–µ—Ç–∞")
    plt.ylabel("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ (‚ÇΩ)")
    plt.xticks(rotation=45)
    plt.grid(True)
    plt.legend()
    plt.tight_layout()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    buffer = io.BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)
    plt.close()
    image = buffer
    photo = BufferedInputFile(image.read(), filename="price_dynamics.png")
    full_city_from_name = user_data['per_day_city_from']
    full_city_to_name = user_data['per_day_city_to']
    if len(str(umonth)) == 1:
        re_month = "0" + str(umonth)
        key = next((key for key, value in month_to_number.items() if value == re_month), None)
    else:
        key = next((key for key, value in month_to_number.items() if value == str(umonth)), None)
    keyboard = create_month_keyboard(type_stat='day')
    if edit:
        await message_or_callback.message.edit_media(
            types.InputMediaPhoto(media=photo,
                                  caption=f"üìä –î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω: {full_city_from_name} ‚Üí {full_city_to_name} "
                                          f"–Ω–∞ {user_data['stat_date']} –∑–∞ {key.title()}"),
            reply_markup=keyboard
        )
    else:
        await message_or_callback.answer_photo(
            photo=photo,
            caption=f"üìä üìä –î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω: {full_city_from_name} ‚Üí {full_city_to_name} "
                    f"–Ω–∞ {user_data['stat_date']} –∑–∞ {key.title()}",
            reply_markup=keyboard
        )

async def stat_per_company(message: types.Message, state: FSMContext):
    umounth = month
    await state.update_data(per_company_date=umounth)
    popular_citys = await get_popular_cities_from()
    keyboard = create_city_keyboard(popular_citys, direction="companyfrom")
    await message.answer("–î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–Ω–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç —á—Ç–æ–±—ã —Ç—ã —É–∫–∞–∑–∞–ª –≥–æ—Ä–æ–¥ –≤—ã–ª–µ—Ç–∞ "
                         "(–≤ –∏–º–µ–Ω–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ –µ—Å–ª–∏ —á—Ç–æ, —Ç–æ–ª—å–∫–æ —Ç—Å—Å—Å...)", reply_markup=keyboard)
    await state.set_state(User.per_company_air_from.state)

async def per_company_air_to_handler(message: types.Message, state: FSMContext):
    cursor.execute("SELECT code FROM aero WHERE LOWER(city) LIKE %s;", (message.text.lower(),))
    resultfrom = cursor.fetchall()
    if resultfrom:
        resultfrom = resultfrom[0][0]
        newres = resultfrom.split(",")
        resultfrom = newres[0]
    else:
        await message.answer("–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ üòî")
        return
    await state.update_data(per_company_air_from=resultfrom)
    await state.update_data(per_company_city_from=message.text)
    popular_citys = await get_popular_cities_to()
    keyboard = create_city_keyboard(popular_citys, direction="companyto")
    await message.answer("üóí –°—É–ø–µ—Ä! —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–∏–ª–µ—Ç–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ", reply_markup=keyboard)
    await state.set_state(User.per_company_air_to.state)


async def per_company_data_stats(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    cursor.execute("SELECT code FROM aero WHERE lower(city) LIKE %s;", (message.text.lower(),))
    resultto = cursor.fetchall()
    if resultto:
        resultto = resultto[0][0]
        newres = resultto.split(",")
        resultto = newres[0]
        if resultto == user_data['per_company_air_from']:
            await message.answer(
                "–Ø –Ω–µ –º–æ–≥—É –≤—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –≤—ã –≤–≤–µ–ª–∏ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –≥–æ—Ä–æ–¥ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≥–æ—Ä–æ–¥–∞ –≤—ã–ª–µ—Ç–∞ –∏ –ø—Ä–∏–ª–µ—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π")
            return
    else:
        await message.answer("–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        return
    await state.update_data(per_company_air_to=resultto)
    await state.update_data(per_company_city_to=message.text)
    user_data = await state.get_data()
    city_from = user_data['per_company_air_from']
    city_to = user_data['per_company_air_to']
    await message.answer("–û—Ç–ª–∏—á–Ω–æ, —Å–µ–π—á–∞—Å —è –ø–æ–∫–∞–∂—É –∫–∞–∫ –º–µ–Ω—è–ª–∞—Å—å —Ü–µ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–ø–∞–Ω–∏–π üòá")
    await plot_company_comparison(message, city_from, city_to, user_data['per_company_date'], state)

async def plot_company_comparison(message_or_callback, city_from, city_to, umonth, state: FSMContext, edit=False):
    user_data = await state.get_data()
    conn = psycopg2.connect(dbname="Aeroports", host="127.0.0.1", user="Alex", password="alex")
    cursor = conn.cursor()

    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    query = """
    SELECT company, AVG(price) as avg_price, MIN(price) as min_price
    FROM all_flyghts
    WHERE city_from = %s AND city_to = %s AND EXTRACT(MONTH FROM fly_date) = %s
    GROUP BY company
    ORDER BY avg_price;
    """
    cursor.execute(query, (city_from, city_to, umonth))
    data = cursor.fetchall()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    companies = [row[0] for row in data]
    avg_prices = [row[1] for row in data]
    min_prices = [row[2] for row in data]

    x = np.arange(len(companies))
    width = 0.35

    fig, ax = plt.subplots(figsize=(10, 6))
    bars_avg = ax.bar(x - width / 2, avg_prices, width, label='–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞', color='skyblue')
    bars_min = ax.bar(x + width / 2, min_prices, width, label='–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞', color='lightgreen')
    # –î–æ–±–∞–≤–∏–º –ø–æ–¥–ø–∏—Å–∏ –∫ —Å—Ç–æ–ª–±—Ü–∞–º
    for bar in bars_avg:
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width() / 2, height + 100, f'{int(height)}', ha='center', va='bottom', fontsize=9)

    for bar in bars_min:
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width() / 2, height + 100, f'{int(height)}', ha='center', va='bottom', fontsize=9)

    ax.set_ylabel('–¶–µ–Ω–∞')
    full_city_from_name = user_data['per_company_city_from']
    full_city_to_name = user_data['per_company_city_to']
    if len(str(umonth)) == 1:
        re_month = "0" + str(umonth)
        key = next((key for key, value in month_to_number.items() if value == re_month), None)
    else:
        key = next((key for key, value in month_to_number.items() if value == str(umonth)), None)
    ax.set_title(f'–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π –ø–æ –º–∞—Ä—à—Ä—É—Ç—É {full_city_from_name} ‚Üí {full_city_to_name} –º–µ—Å—è—Ü: {key.title()}')
    ax.set_xticks(x)
    ax.set_xticklabels(companies, rotation=45)
    ax.legend()
    ax.grid(axis='y')
    plt.tight_layout()
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close()
    cursor.close()
    conn.close()

    keyboard = create_month_keyboard(type_stat='company')

    photo = BufferedInputFile(buf.read(), filename="chart.png")

    if edit:
        await message_or_callback.message.edit_media(
            types.InputMediaPhoto(media=photo,
                                  caption=f"üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–π: {full_city_from_name} ‚Üí "
                                          f"{full_city_to_name}, –º–µ—Å—è—Ü {key.title()}"),
            reply_markup=keyboard
        )
    else:
        await message_or_callback.answer_photo(
            photo=photo,
            caption=f"üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–π: {full_city_from_name} ‚Üí {full_city_to_name}, –º–µ—Å—è—Ü {key.title()}",
            reply_markup=keyboard
        )


def register_message(dp: Dispatcher):
    dp.message.register(start_command, CommandStart())
    dp.message.register(help_command, Command('help'))
    dp.message.register(air_from_handler, Command("air"))
    dp.message.register(air_to_handler, User.air_from)
    dp.message.register(month_handler, User.air_to)
    dp.message.register(day_handler, User.month)
    dp.message.register(vivod_handler, User.day)

    dp.message.register(repeat_order, Command("repeat"))

    dp.message.register(statistics, Command("stats"))
    dp.message.register(stat_per_company, Command("stats_per_company"))
    dp.message.register(stats_per_day, Command("stats_per_day"))
    dp.message.register(stat_air_to_handler, User.per_day_air_from)
    dp.message.register(data_stats, User.per_day_air_to)
    dp.message.register(stats_per_day_magic, User.per_day_date)

    dp.message.register(per_company_air_to_handler, User.per_company_air_from)
    dp.message.register(per_company_data_stats, User.per_company_air_to)
    #dp.message.register(state_handler, User.number)
