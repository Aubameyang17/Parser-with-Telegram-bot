from aiogram import types, Dispatcher, F, Bot
from aiogram.fsm.context import FSMContext

from handlers.message import show_page, get_popular_cities_to, cursor, plot_company_comparison, plot_day_comparison
from keyboards.keyboards import user_menu, create_city_keyboard
from states.state import User


async def aboutme_hend(query: types.CallbackQuery):
    await query.message.edit_text("–†–∞–¥, —á—Ç–æ —Ç—ã —Å–ø—Ä–æ—Å–∏–ª\n"
                         '–Ø –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —Ä–µ–¥–∫–æ –≥–æ–≤–æ—Ä—é –æ —Å–µ–±–µ, –Ω–æ –º–∞–º–∞ –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ —è –∫–ª–∞—Å—Å–Ω—ã–π', reply_markup=user_menu)

async def name_hend(query: types.CallbackQuery, bot: Bot):
    await query.message.edit_text(f'–ú–µ–Ω—è –∑–æ–≤—É—Ç {(await bot.get_me()).full_name}. '
                         f'–ê –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –•–æ—Ç—è, –º–æ–∂–µ—à—å –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å, —è –Ω–µ —Å–º–æ–≥—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å', reply_markup=user_menu)

async def paginate_callback(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    page = user_data.get('page', 0)
    flights = user_data.get('all_flights', [])

    if callback.data == "next":
        page += 1
    elif callback.data == "prev" and page > 0:
        page -= 1

    if page < 0:
        page = 0
    elif page >= len(flights):
        page = len(flights) - 1

    await state.update_data(page=page)

    await callback.message.delete()
    await show_page(callback.message, flights, page, user_data)

    await callback.answer()


async def select_city_from(callback: types.CallbackQuery, state: FSMContext):
    city = callback.data.split("_", 2)[2]
    cursor.execute(f"SELECT code FROM aero WHERE city LIKE '{city}';")
    resultfrom = cursor.fetchall()
    resultfrom = resultfrom[0][0]
    newres = resultfrom.split(",")
    resultfrom = newres[0]
    await state.update_data(city_from=city)
    await state.update_data(air_from=resultfrom)
    popular_citys = await get_popular_cities_to()
    keyboard = create_city_keyboard(popular_citys, direction="to")
    await callback.message.answer("üõ¨ –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–µ—Ç–µ—Ç—å", reply_markup=keyboard)
    await state.set_state(User.air_to.state)


async def select_city_to(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    city = callback.data.split("_", 2)[2]
    cursor.execute(f"SELECT code FROM aero WHERE city LIKE '{city}';")
    resultto = cursor.fetchall()
    if resultto:
        resultto = resultto[0][0]
        newres = resultto.split(",")
        resultto = newres[0]
        if resultto == user_data['air_from']:
            await callback.message.answer(
                "–Ø –Ω–µ –º–æ–≥—É –≤—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –≤—ã –≤–≤–µ–ª–∏ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –≥–æ—Ä–æ–¥ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≥–æ—Ä–æ–¥–∞ –≤—ã–ª–µ—Ç–∞ –∏ –ø—Ä–∏–ª–µ—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π")
            return
    await state.update_data(city_to=city)
    await state.update_data(air_to=resultto)
    await callback.message.answer("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è –ø–µ—Ä–µ–ª–µ—Ç–∞")
    await state.set_state(User.month.state)

async def change_company_month(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    month = int(callback.data.split('_')[2])
    city_from = user_data['per_company_air_from']
    city_to = user_data['per_company_air_to']
    await plot_company_comparison(callback, city_from, city_to, month, state, edit=True)

async def change_day_month(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    month = int(callback.data.split('_')[2])
    city_from = user_data['per_day_air_from']
    city_to = user_data['per_day_air_to']
    await plot_day_comparison(callback, city_from, city_to, month, state, edit=True)


async def select_stat_air_from(callback: types.CallbackQuery, state: FSMContext):
    city = callback.data.split("_")[-1]
    cursor.execute("SELECT code FROM aero WHERE city LIKE %s;", (city,))
    resultfrom = cursor.fetchall()
    resultfrom = resultfrom[0][0]
    newres = resultfrom.split(",")
    resultfrom = newres[0]
    await state.update_data(per_day_air_from=resultfrom)
    await state.update_data(per_day_city_from=city)
    popular_citys = await get_popular_cities_to()
    keyboard = create_city_keyboard(popular_citys, direction="dayto")
    await callback.message.answer("üóí –°—É–ø–µ—Ä! —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–∏–ª–µ—Ç–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ", reply_markup=keyboard)
    await state.set_state(User.per_day_air_to.state)


async def select_stat_air_to(callback: types.CallbackQuery, state: FSMContext):
    city = callback.data.split("_")[-1]
    user_data = await state.get_data()
    cursor.execute("SELECT code FROM aero WHERE city LIKE %s;", (city,))
    resultto = cursor.fetchall()
    if resultto:
        resultto = resultto[0][0]
        newres = resultto.split(",")
        resultto = newres[0]
        if resultto == user_data['per_day_air_from']:
            await callback.message.answer(
                "–Ø –Ω–µ –º–æ–≥—É –≤—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –≤—ã –≤–≤–µ–ª–∏ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –≥–æ—Ä–æ–¥ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≥–æ—Ä–æ–¥–∞ –≤—ã–ª–µ—Ç–∞ –∏ –ø—Ä–∏–ª–µ—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π")
            return
    await state.update_data(per_day_air_to=resultto)
    await state.update_data(per_day_city_to=city)
    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ, —Å–µ–π—á–∞—Å —è –ø–æ–∫–∞–∂—É –∫–∞–∫ –º–µ–Ω—è–ª–∞—Å—å —Ü–µ–Ω–∞ –ø–æ –∑–∞–¥–∞–Ω–æ–º—É —Ç–æ–±–æ–π –º–∞—Ä—à—Ä—É—Ç—É üòá\n"
                         "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–Ω–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–Ω—è –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ –≤—ã–ª–µ—Ç–∞ üìÖ, "
                         "–º–æ–∂–µ—à—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –µ–µ —É–∫–∞–∑–∞—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ -> 2025-01-01 (–≥–æ–¥-–º–µ—Å—è—Ü-–¥–µ–Ω—å) ü•π\n"
                         "–ï—Å–ª–∏ —Ç—ã –≤–≤–µ–¥–µ—à—å –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É —è –Ω–µ –±—É–¥—É —Ç–µ–±—è –ø–æ–ø—Ä–æ–≤–ª—è—Ç—å, "
                         "–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—É —á—Ç–æ –ø–æ —Ç–∞–∫–æ–π –¥–∞—Ç–µ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ üòí")
    await state.set_state(User.per_day_date.state)


async def select_company_air_from(callback: types.CallbackQuery, state: FSMContext):
    city = callback.data.split("_")[-1]
    cursor.execute("SELECT code FROM aero WHERE city LIKE %s;", (city,))
    resultfrom = cursor.fetchall()
    resultfrom = resultfrom[0][0]
    newres = resultfrom.split(",")
    resultfrom = newres[0]
    await state.update_data(per_company_air_from=resultfrom)
    await state.update_data(per_company_city_from=city)
    popular_citys = await get_popular_cities_to()
    keyboard = create_city_keyboard(popular_citys, direction="companyto")
    await callback.message.answer("üóí –°—É–ø–µ—Ä! —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–∏–ª–µ—Ç–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ", reply_markup=keyboard)
    await state.set_state(User.per_company_air_to.state)


async def select_company_air_to(callback: types.CallbackQuery, state: FSMContext):
    city = callback.data.split("_")[-1]
    user_data = await state.get_data()
    cursor.execute("SELECT code FROM aero WHERE city LIKE %s;", (city,))
    resultto = cursor.fetchall()
    resultto = resultto[0][0]
    newres = resultto.split(",")
    resultto = newres[0]
    if resultto == user_data['per_company_air_from']:
        await callback.message.answer(
            "–Ø –Ω–µ –º–æ–≥—É –≤—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –≤—ã –≤–≤–µ–ª–∏ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –≥–æ—Ä–æ–¥ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –≥–æ—Ä–æ–¥–∞ –≤—ã–ª–µ—Ç–∞ –∏ –ø—Ä–∏–ª–µ—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π")
        return
    await state.update_data(per_company_air_to=resultto)
    await state.update_data(per_company_city_to=city)
    user_data = await state.get_data()
    city_from = user_data['per_company_air_from']
    city_to = user_data['per_company_air_to']
    umounth = user_data['per_company_date']
    await callback.message.answer("–û—Ç–ª–∏—á–Ω–æ, —Å–µ–π—á–∞—Å —è –ø–æ–∫–∞–∂—É –∫–∞–∫ –º–µ–Ω—è–ª–∞—Å—å —Ü–µ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–º–ø–∞–Ω–∏–π üòá")
    await plot_company_comparison(callback, city_from, city_to, umounth, state, edit=True)


def register_callbacks(dp: Dispatcher):
    dp.callback_query.register(aboutme_hend, F.data == 'aboutme')
    dp.callback_query.register(name_hend, F.data == 'name')
    dp.callback_query.register(paginate_callback, F.data.in_(['next', 'prev']))
    dp.callback_query.register(select_city_from, F.data.startswith("select_from_"))
    dp.callback_query.register(select_city_to, F.data.startswith("select_to_"))
    dp.callback_query.register(select_stat_air_from, F.data.startswith("select_dayfrom_"))
    dp.callback_query.register(select_stat_air_to, F.data.startswith("select_dayto_"))
    dp.callback_query.register(select_company_air_from, F.data.startswith("select_companyfrom_"))
    dp.callback_query.register(select_company_air_to, F.data.startswith("select_companyto_"))
    dp.callback_query.register(change_company_month, lambda c: c.data.startswith('month_company_'))
    dp.callback_query.register(change_day_month, lambda c: c.data.startswith('month_day_'))